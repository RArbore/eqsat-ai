use core::str::FromStr;

use crate::database::Database;
use crate::frontend::*;

grammar<'a>(interner: &mut Interner, database: &mut Database<'a>);

pub Program: Vec<Rule> = {
    => Vec::new(),
    <mut p:Program> <x:Rule> ";" => {
        p.push(x);
        p
    },
    <p:Program> Declaration ";" => p,
}

Declaration: () = {
    ".decl(" <s:Symbol> <det:Usize> <dep:Usize> ")" => {
        database.register_table(s, det, dep, Box::new(|_, _, _| panic!()), Box::new(|_, _| panic!()));
    },
}

Rule: Rule = {
    <query:Query> "=>" <action:Action> => {
        Rule { query, action }
    }
}

Query: Query = {
    <atoms:AtomList> => {
        Query { atoms }
    }
}

Action: Action = {
    <atoms:AtomList> => {
        Action::InsertPattern{ atoms }
    }
}

AtomList: Vec<Atom> = {
    => Vec::new(),
    <mut l:AtomList> <a:Atom> => {
        l.push(a);
        l
    }
}

Atom: Atom = {
    <s:Symbol> "(" <slots:SlotList> ")" => Atom { table: database.table_id(s), slots },
}

SlotList: Vec<Slot> = {
    => Vec::new(),
    <mut l:SlotList> <a:Slot> => {
        l.push(a);
        l
    }
}

Slot: Slot = {
    "_" => Slot::Wildcard,
    U32 => Slot::Concrete(<>),
    Symbol => Slot::Variable(<>),
}

Symbol: Symbol = {
    Iden => interner.get_or_intern(<>),
}

Usize: usize = r"-?[0-9]+" => usize::from_str(<>).unwrap();
U32: u32 = r"-?[0-9]+" => u32::from_str(<>).unwrap();
Iden: &'input str = r"[a-zA-Z_][a-zA-Z0-9_]*" => <>;
